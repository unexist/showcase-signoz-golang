name: todo

services:
  postgres:
    container_name: todo-postgres
    image: docker.io/postgres:latest
    pull_policy: if_not_present
    env_file: ./env-docker
    environment:
      - POSTGRES_USER=${APP_DB_USERNAME}
      - POSTGRES_PASSWORD=${APP_DB_PASSWORD}
    volumes:
      - ./schema.sql:/docker-entrypoint-initdb.d/schema.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-d", "${APP_DB_NAME}"]
      interval: 30s
      timeout: 60s
      retries: 5
      start_period: 80s

  id-service:
    container_name: id-service
    build:
      context: ../id-service-gin-signoz
      dockerfile: ../id-service-gin-signoz/Containerfile
    env_file: ./env-docker
    ports:
      - "8081:8081"

  todo-service:
    container_name: todo-service
    build:
      context: ../todo-service-gin-signoz
      dockerfile: ../todo-service-gin-signoz/Containerfile
    env_file: ./env-docker
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      id-service:
        condition: service_started

  #prometheus:
  #  container_name: todo-prometheus
  #  image: docker.io/prom/prometheus
  #  volumes:
  #    - "./prometheus.yml:/etc/prometheus/prometheus.yml"
  #  depends_on:
  #    - todo-service

  otelcol:
    container_name: todo-otelcol
    image: docker.io/otel/opentelemetry-collector-contrib:latest
    pull_policy: if_not_present
    command:
      [
        "--config=/etc/otel-collector-config.yaml"
      ]
    volumes:
      - ./otel-collector-config.yaml:/etc/otel-collector-config.yaml
    depends_on:
      - todo-service

  logspout:
    container_name: todo-logspout
    image: "docker.io/gliderlabs/logspout:latest"
    pull_policy: if_not_present
    volumes:
      - /etc/hostname:/etc/host_hostname:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: syslog+tcp://otelcol:2255
    depends_on:
      - otelcol
    restart: on-failure
